{"0xb7c78ed23bb1fd46ab6a2e1dda1fa08e0b940bba":{"name":"hello","meta":"{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"a\",\"type\":\"bytes32\"}],\"name\":\"hello\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"type\":\"function\"}],\"contract\":true,\"deleted\":false,\"timestamp\":1494660585633,\"name\":\"hello\",\"description\":\"\",\"source\":\"pragma solidity ^0.4.0;\\ncontract Hello {\\n    function hello(bytes32 a) constant returns(bytes32) {\\n        return a;\\n    }\\n}\\n\",\"deployment\":true,\"blockNumber\":114}","uuid":null},"0xedfc9c2f4cfa7495c1a95cfe1cb856f5980d5e18":{"name":"website","meta":"{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"num\",\"type\":\"bytes32\"},{\"name\":\"orig_num\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"domain\",\"type\":\"bytes32\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"home\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"}],\"name\":\"upload_website\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"website\",\"outputs\":[{\"name\":\"num\",\"type\":\"bytes32\"},{\"name\":\"orig_num\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"domain\",\"type\":\"bytes32\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"home\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"num\",\"type\":\"bytes32\"}],\"name\":\"get_website\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"num\",\"type\":\"bytes32\"}],\"name\":\"Upload_website\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"num\",\"type\":\"bytes32\"}],\"name\":\"Get_website\",\"type\":\"event\"}],\"contract\":true,\"deleted\":false,\"timestamp\":1494737734970,\"name\":\"website\",\"description\":\"\",\"source\":\"pragma solidity ^0.4.0;\\n\\n/// @title manage website's information\\ncontract Website {\\n    //enum Status {pass, down, expired}\\n    struct Info {\\n        bytes32 num;\\n        string orig_num;\\n        //Status status;\\n        string status;\\n        bytes32 domain;\\n        bytes32 name;\\n        string home;\\n        string time;\\n    }\\n\\n    mapping (bytes32 => Info) public website;\\n\\n    event Upload_website(bytes32 num);\\n    event Get_website(bytes32 num);\\n\\n    function Website() {}\\n\\n    // add or update\\n    //function upload_website(bytes32 num,uint orig_num,Status status,bytes32 domain,bytes32 name,string home,uint48 time) returns(bool){\\n    function upload_website(bytes32 num,string orig_num,string status,bytes32 domain,bytes32 name,string home,string time) returns(bool){\\n        website[num].num = num;\\n        website[num].orig_num = orig_num;\\n        website[num].status = status;\\n        website[num].domain = domain;\\n        website[num].name = name;\\n        website[num].home = home;\\n        website[num].time = time;\\n        Upload_website(num);\\n    }\\n\\n    //function get_website(bytes32 num) constant returns(uint,uint,Status,bytes32,bytes32,string,uint48){\\n    function get_website(bytes32 num) constant returns(bytes32,string,string,bytes32,bytes32,string,string){\\n        //if (website[num].num == num)\\n        return (website[num].num,website[num].orig_num,website[num].status,website[num].domain,website[num].name,website[num].home,website[num].time);\\n        //else\\n            // define a struct to indicate not be filed or throw a error\\n            //throw;\\n        Get_website(num);\\n    }\\n}\\n\",\"deployment\":true,\"blockNumber\":9}","uuid":null},"0x5f3dba5e45909d1bf126aa0af0601b1a369dbfd7":{"name":"org","meta":"{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"num\",\"type\":\"bytes32\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"property\",\"type\":\"string\"},{\"name\":\"principle\",\"type\":\"string\"}],\"name\":\"upload_org\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"num\",\"type\":\"bytes32\"}],\"name\":\"get_org\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"},{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"org\",\"outputs\":[{\"name\":\"num\",\"type\":\"bytes32\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"property\",\"type\":\"string\"},{\"name\":\"principle\",\"type\":\"string\"}],\"payable\":false,\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"num\",\"type\":\"bytes32\"}],\"name\":\"Upload_org\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"num\",\"type\":\"bytes32\"}],\"name\":\"Get_org\",\"type\":\"event\"}],\"contract\":true,\"deleted\":false,\"timestamp\":1494727702753,\"name\":\"org\",\"description\":\"\",\"source\":\"pragma solidity ^0.4.0;\\n\\n/// @title manage organizer's information\\ncontract Organizer {\\n    //enum Property {enterprise, personal}  \\n    struct Info {\\n        bytes32 num;\\n        string name;\\n        //Property property;\\n        string property;\\n        string principle;\\n    }\\n\\n    mapping (bytes32 => Info) public org;\\n\\n    event Upload_org(bytes32 num);\\n    event Get_org(bytes32 num);\\n\\n    function Organizer() {}\\n\\n    //add\\n    //function upload_org(uint num,bytes32 name,Property property,bytes32 principle) returns(bool){\\n    function upload_org(bytes32 num,string name,string property,string principle) returns(bool){\\n        if (org[num].num == num)\\n            return false;\\n        org[num].num = num;\\n        org[num].name = name;\\n        org[num].property = property;\\n        org[num].principle = principle;\\n        Upload_org(num);\\n    }\\n\\n    //function get_org(uint num) constant returns(uint,bytes32,Property,bytes32){\\n    function get_org(bytes32 num) constant returns(string,string,string){\\n        if (org[num].num == num)\\n            return (org[num].name,org[num].property,org[num].principle);\\n        else\\n            //define a struct to indicate not be filed or throw a error\\n            throw;\\n        Get_org(num);\\n    }\\n}\\n\\n\",\"deployment\":true,\"blockNumber\":50}","uuid":null}}